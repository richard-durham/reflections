Udacity - Git & Github course

Lesson 2 Reflections

* Reflect: Initializing a Repository
What happens when you initalize a repository?  Why do you need to do it?
When you initialize a repository, Git creates the .git file, and takes an inventory of what is in the directory/repository.
Without the inital inventory, Git would not know what it had to work with.

* Reflect: Staging Area
How is the staging area different from the working directory and the repository?  What value do you think it offers?
The staging area is simply a list of the files currently under consideration for a commit.  This allows the user to see, clearly and simply, what is to be included in the commit.  This clarity should reduce likelihood of a bad commit (i.e. including too few or too many files).

*Reflect: Commit Size
How can you use the staging area to make sure you have one commit per logical change?
Use of 'git diff --staged' allows you to see exactly which changes are about to be committed.  This allows you to determine if the staging area contains a logical change, or if you need to either add more (due to a missing piece) or remove bits (in case there is more than one logical change in the staging area)

*Reflect: When to Use Branches
What are some situations when branches would be helpful in keeping your history organized?  How would branches help?
Branches would be useful for keeping uncertain changes seperate from the main/working code.  Allowing you to experiment without fear of breaking everything - and at the same time making it easy to see the differences between the experimental code and the 'master'/working code.

*Refelect: Visualizing with Diagrams
How do the diagrams help you visualize the branch structure?
The diagrams shows which commits make up each branch, thus making it easier to see what is in common and what is unique to each branch.

*Reflect: Merging Two Branches
What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?
The result of megering, successfully, two branches, is to bring the code unique to each branch together into a single branch (hopefully all working).  This means that the commits in each branch are now accessible under the single branch name.
We represent merging of two branches in the diagram to clearly show that it was two branches that have been brought together.

*Reflect: Automatic vs Manual Merging
What are the pros and cons of Git's automatic merging vs always doing mergers manually?
Pro - saves time.  Yes something could be broken in the merge but the automatic approach seems to minimize that likelyhood whilst still offering ease of automation.
Cons - If something breaks with automatic merge then you have to go and find out what has broken and why.  
If you always had to merge manually it would take a lot of time, every time, so making it less likely that you would merge.  So automatic saves times, at a small increase in risk.

